{"version":3,"sources":["assets/libs/jqBootstrapValidation/jqBootstrapValidation.js"],"names":["$","createdElements","defaults","options","prependExistingHelpBlock","sniffHtml","preventSubmit","submitError","submitSuccess","semanticallyStrict","autoAdd","helpBlocks","filter","methods","init","settings","extend","$siblingElements","uniqueForms","unique","map","parents","toArray","bind","e","$form","warningsFound","$inputs","find","not","trigger","each","i","el","$this","$controlGroup","first","hasClass","removeClass","addClass","preventDefault","isFunction","jqBootstrapValidation","$helpBlock","validatorNames","length","append","push","message","undefined","attr","data","max","min","builtInValidators","required","toLowerCase","number","split","parts","replace","validatorNamesToInspect","newValidatorNamesToInspect","formatValidatorName","i2","el2","validator","type","shortcut","validators","hasOverrideMessage","foundValidator","validatorTypes","validatorType","validatorTemplate","name","validatorTemplateType","error","html","event","params","value","getValue","errorsFound","validatorTypeArray","includeEmpty","blockSubmit","submitting","validate","triggerHandler","join","oldCount","j","original","sort","destroy","unbind","indexOf","remove","collectErrors","errorMessages","$el","errors","hasErrors","concat","override","newDefaults","callback","validatorName","lastValue","val","lastValid","lastFinished","rrjqbvValidator","rrjqbvThis","executeFunctionByName","functionName","context","args","Array","prototype","slice","call","arguments","splice","namespaces","func","pop","apply","window","valid","setTimeout","ajax","url","dataType","success","failure","regex","inputstring","RegExp","regexFromString","test","negative","match","element","parseFloat","maxlength","minlength","maxchecked","elements","minchecked","email","validemail","passwordagain","positive","integer","positivenumber","negativenumber","checkone","m","p1","p2","toUpperCase","is","fn","method","jQuery"],"mappings":"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","file":"jqBootstrapValidation.77790966.js","sourceRoot":"../src","sourcesContent":["/* jqBootstrapValidation\n * A plugin for automating validation on Twitter Bootstrap formatted forms.\n *\n * v1.3.6\n *\n * License: MIT <http://opensource.org/licenses/mit-license.php> - see LICENSE file\n *\n * http://ReactiveRaven.github.com/jqBootstrapValidation/\n */\n\n(function( $ ){\n\n\tvar createdElements = [];\n\n\tvar defaults = {\n\t\toptions: {\n\t\t\tprependExistingHelpBlock: false,\n\t\t\tsniffHtml: true, // sniff for 'required', 'maxlength', etc\n\t\t\tpreventSubmit: true, // stop the form submit event from firing if validation fails\n\t\t\tsubmitError: false, // function called if there is an error when trying to submit\n\t\t\tsubmitSuccess: false, // function called just before a successful submit event is sent to the server\n            semanticallyStrict: false, // set to true to tidy up generated HTML output\n\t\t\tautoAdd: {\n\t\t\t\thelpBlocks: true\n\t\t\t},\n            filter: function () {\n                // return $(this).is(\":visible\"); // only validate elements you can see\n                return true; // validate everything\n            }\n\t\t},\n    methods: {\n      init : function( options ) {\n\n        var settings = $.extend(true, {}, defaults);\n\n        settings.options = $.extend(true, settings.options, options);\n\n        var $siblingElements = this;\n\n        var uniqueForms = $.unique(\n          $siblingElements.map( function () {\n            return $(this).parents(\"form\")[0];\n          }).toArray()\n        );\n\n        $(uniqueForms).bind(\"submit\", function (e) {\n          var $form = $(this);\n          var warningsFound = 0;\n          var $inputs = $form.find(\"input,textarea,select\").not(\"[type=submit],[type=image]\").filter(settings.options.filter);\n          $inputs.trigger(\"submit.validation\").trigger(\"validationLostFocus.validation\");\n\n          $inputs.each(function (i, el) {\n            var $this = $(el),\n              $controlGroup = $this.parents(\".form-group\").first();\n            if (\n              $controlGroup.hasClass(\"warning\")\n            ) {\n              $controlGroup.removeClass(\"warning\").addClass(\"error\");\n              warningsFound++;\n            }\n          });\n\n          $inputs.trigger(\"validationLostFocus.validation\");\n\n          if (warningsFound) {\n            if (settings.options.preventSubmit) {\n              e.preventDefault();\n            }\n            $form.addClass(\"error\");\n            if ($.isFunction(settings.options.submitError)) {\n              settings.options.submitError($form, e, $inputs.jqBootstrapValidation(\"collectErrors\", true));\n            }\n          } else {\n            $form.removeClass(\"error\");\n            if ($.isFunction(settings.options.submitSuccess)) {\n              settings.options.submitSuccess($form, e);\n            }\n          }\n        });\n\n        return this.each(function(){\n\n          // Get references to everything we're interested in\n          var $this = $(this),\n            $controlGroup = $this.parents(\".form-group\").first(),\n            $helpBlock = $controlGroup.find(\".help-block\").first(),\n            $form = $this.parents(\"form\").first(),\n            validatorNames = [];\n\n          // create message container if not exists\n          if (!$helpBlock.length && settings.options.autoAdd && settings.options.autoAdd.helpBlocks) {\n              $helpBlock = $('<div class=\"help-block\" />');\n              $controlGroup.find('.controls').append($helpBlock);\n\t\t\t\t\t\t\tcreatedElements.push($helpBlock[0]);\n          }\n\n          // =============================================================\n          //                                     SNIFF HTML FOR VALIDATORS\n          // =============================================================\n\n          // *snort sniff snuffle*\n\n          if (settings.options.sniffHtml) {\n            var message = \"\";\n            // ---------------------------------------------------------\n            //                                                   PATTERN\n            // ---------------------------------------------------------\n            if ($this.attr(\"pattern\") !== undefined) {\n              message = \"Not in the expected format<!-- data-validation-pattern-message to override -->\";\n              if ($this.data(\"validationPatternMessage\")) {\n                message = $this.data(\"validationPatternMessage\");\n              }\n              $this.data(\"validationPatternMessage\", message);\n              $this.data(\"validationPatternRegex\", $this.attr(\"pattern\"));\n            }\n            // ---------------------------------------------------------\n            //                                                       MAX\n            // ---------------------------------------------------------\n            if ($this.attr(\"max\") !== undefined || $this.attr(\"aria-valuemax\") !== undefined) {\n              var max = ($this.attr(\"max\") !== undefined ? $this.attr(\"max\") : $this.attr(\"aria-valuemax\"));\n              message = \"Too high: Maximum of '\" + max + \"'<!-- data-validation-max-message to override -->\";\n              if ($this.data(\"validationMaxMessage\")) {\n                message = $this.data(\"validationMaxMessage\");\n              }\n              $this.data(\"validationMaxMessage\", message);\n              $this.data(\"validationMaxMax\", max);\n            }\n            // ---------------------------------------------------------\n            //                                                       MIN\n            // ---------------------------------------------------------\n            if ($this.attr(\"min\") !== undefined || $this.attr(\"aria-valuemin\") !== undefined) {\n              var min = ($this.attr(\"min\") !== undefined ? $this.attr(\"min\") : $this.attr(\"aria-valuemin\"));\n              message = \"Too low: Minimum of '\" + min + \"'<!-- data-validation-min-message to override -->\";\n              if ($this.data(\"validationMinMessage\")) {\n                message = $this.data(\"validationMinMessage\");\n              }\n              $this.data(\"validationMinMessage\", message);\n              $this.data(\"validationMinMin\", min);\n            }\n            // ---------------------------------------------------------\n            //                                                 MAXLENGTH\n            // ---------------------------------------------------------\n            if ($this.attr(\"maxlength\") !== undefined) {\n              message = \"Too long: Maximum of '\" + $this.attr(\"maxlength\") + \"' characters<!-- data-validation-maxlength-message to override -->\";\n              if ($this.data(\"validationMaxlengthMessage\")) {\n                message = $this.data(\"validationMaxlengthMessage\");\n              }\n              $this.data(\"validationMaxlengthMessage\", message);\n              $this.data(\"validationMaxlengthMaxlength\", $this.attr(\"maxlength\"));\n            }\n            // ---------------------------------------------------------\n            //                                                 MINLENGTH\n            // ---------------------------------------------------------\n            if ($this.attr(\"minlength\") !== undefined) {\n              message = \"Too short: Minimum of '\" + $this.attr(\"minlength\") + \"' characters<!-- data-validation-minlength-message to override -->\";\n              if ($this.data(\"validationMinlengthMessage\")) {\n                message = $this.data(\"validationMinlengthMessage\");\n              }\n              $this.data(\"validationMinlengthMessage\", message);\n              $this.data(\"validationMinlengthMinlength\", $this.attr(\"minlength\"));\n            }\n            // ---------------------------------------------------------\n            //                                                  REQUIRED\n            // ---------------------------------------------------------\n            if ($this.attr(\"required\") !== undefined || $this.attr(\"aria-required\") !== undefined) {\n              message = settings.builtInValidators.required.message;\n              if ($this.data(\"validationRequiredMessage\")) {\n                message = $this.data(\"validationRequiredMessage\");\n              }\n              $this.data(\"validationRequiredMessage\", message);\n            }\n            // ---------------------------------------------------------\n            //                                                    NUMBER\n            // ---------------------------------------------------------\n            if ($this.attr(\"type\") !== undefined && $this.attr(\"type\").toLowerCase() === \"number\") {\n              message = settings.builtInValidators.number.message;\n              if ($this.data(\"validationNumberMessage\")) {\n                message = $this.data(\"validationNumberMessage\");\n              }\n              $this.data(\"validationNumberMessage\", message);\n            }\n            // ---------------------------------------------------------\n            //                                                     EMAIL\n            // ---------------------------------------------------------\n            if ($this.attr(\"type\") !== undefined && $this.attr(\"type\").toLowerCase() === \"email\") {\n              message = \"Not a valid email address<!-- data-validator-validemail-message to override -->\";\n              if ($this.data(\"validationValidemailMessage\")) {\n                message = $this.data(\"validationValidemailMessage\");\n              } else if ($this.data(\"validationEmailMessage\")) {\n                message = $this.data(\"validationEmailMessage\");\n              }\n              $this.data(\"validationValidemailMessage\", message);\n            }\n            // ---------------------------------------------------------\n            //                                                MINCHECKED\n            // ---------------------------------------------------------\n            if ($this.attr(\"minchecked\") !== undefined) {\n              message = \"Not enough options checked; Minimum of '\" + $this.attr(\"minchecked\") + \"' required<!-- data-validation-minchecked-message to override -->\";\n              if ($this.data(\"validationMincheckedMessage\")) {\n                message = $this.data(\"validationMincheckedMessage\");\n              }\n              $this.data(\"validationMincheckedMessage\", message);\n              $this.data(\"validationMincheckedMinchecked\", $this.attr(\"minchecked\"));\n            }\n            // ---------------------------------------------------------\n            //                                                MAXCHECKED\n            // ---------------------------------------------------------\n            if ($this.attr(\"maxchecked\") !== undefined) {\n              message = \"Too many options checked; Maximum of '\" + $this.attr(\"maxchecked\") + \"' required<!-- data-validation-maxchecked-message to override -->\";\n              if ($this.data(\"validationMaxcheckedMessage\")) {\n                message = $this.data(\"validationMaxcheckedMessage\");\n              }\n              $this.data(\"validationMaxcheckedMessage\", message);\n              $this.data(\"validationMaxcheckedMaxchecked\", $this.attr(\"maxchecked\"));\n            }\n          }\n\n          // =============================================================\n          //                                       COLLECT VALIDATOR NAMES\n          // =============================================================\n\n          // Get named validators\n          if ($this.data(\"validation\") !== undefined) {\n            validatorNames = $this.data(\"validation\").split(\",\");\n          }\n\n          // Get extra ones defined on the element's data attributes\n          $.each($this.data(), function (i, el) {\n            var parts = i.replace(/([A-Z])/g, \",$1\").split(\",\");\n            if (parts[0] === \"validation\" && parts[1]) {\n              validatorNames.push(parts[1]);\n            }\n          });\n\n          // =============================================================\n          //                                     NORMALISE VALIDATOR NAMES\n          // =============================================================\n\n          var validatorNamesToInspect = validatorNames;\n          var newValidatorNamesToInspect = [];\n\n          do // repeatedly expand 'shortcut' validators into their real validators\n          {\n            // Uppercase only the first letter of each name\n            $.each(validatorNames, function (i, el) {\n              validatorNames[i] = formatValidatorName(el);\n            });\n\n            // Remove duplicate validator names\n            validatorNames = $.unique(validatorNames);\n\n            // Pull out the new validator names from each shortcut\n            newValidatorNamesToInspect = [];\n            $.each(validatorNamesToInspect, function(i, el) {\n              if ($this.data(\"validation\" + el + \"Shortcut\") !== undefined) {\n                // Are these custom validators?\n                // Pull them out!\n                $.each($this.data(\"validation\" + el + \"Shortcut\").split(\",\"), function(i2, el2) {\n                  newValidatorNamesToInspect.push(el2);\n                });\n              } else if (settings.builtInValidators[el.toLowerCase()]) {\n                // Is this a recognised built-in?\n                // Pull it out!\n                var validator = settings.builtInValidators[el.toLowerCase()];\n                if (validator.type.toLowerCase() === \"shortcut\") {\n                  $.each(validator.shortcut.split(\",\"), function (i, el) {\n                    el = formatValidatorName(el);\n                    newValidatorNamesToInspect.push(el);\n                    validatorNames.push(el);\n                  });\n                }\n              }\n            });\n\n            validatorNamesToInspect = newValidatorNamesToInspect;\n\n          } while (validatorNamesToInspect.length > 0)\n\n          // =============================================================\n          //                                       SET UP VALIDATOR ARRAYS\n          // =============================================================\n\n          var validators = {};\n\n          $.each(validatorNames, function (i, el) {\n            // Set up the 'override' message\n            var message = $this.data(\"validation\" + el + \"Message\");\n            var hasOverrideMessage = (message !== undefined);\n            var foundValidator = false;\n            message =\n              (\n                message\n                  ? message\n                  : \"'\" + el + \"' validation failed <!-- Add attribute 'data-validation-\" + el.toLowerCase() + \"-message' to input to change this message -->\"\n              )\n            ;\n\n            $.each(\n              settings.validatorTypes,\n              function (validatorType, validatorTemplate) {\n                if (validators[validatorType] === undefined) {\n                  validators[validatorType] = [];\n                }\n                if (!foundValidator && $this.data(\"validation\" + el + formatValidatorName(validatorTemplate.name)) !== undefined) {\n                  validators[validatorType].push(\n                    $.extend(\n                      true,\n                      {\n                        name: formatValidatorName(validatorTemplate.name),\n                        message: message\n                      },\n                      validatorTemplate.init($this, el)\n                    )\n                  );\n                  foundValidator = true;\n                }\n              }\n            );\n\n            if (!foundValidator && settings.builtInValidators[el.toLowerCase()]) {\n\n              var validator = $.extend(true, {}, settings.builtInValidators[el.toLowerCase()]);\n              if (hasOverrideMessage) {\n                validator.message = message;\n              }\n              var validatorType = validator.type.toLowerCase();\n\n              if (validatorType === \"shortcut\") {\n                foundValidator = true;\n              } else {\n                $.each(\n                  settings.validatorTypes,\n                  function (validatorTemplateType, validatorTemplate) {\n                    if (validators[validatorTemplateType] === undefined) {\n                      validators[validatorTemplateType] = [];\n                    }\n                    if (!foundValidator && validatorType === validatorTemplateType.toLowerCase()) {\n                      $this.data(\"validation\" + el + formatValidatorName(validatorTemplate.name), validator[validatorTemplate.name.toLowerCase()]);\n                      validators[validatorType].push(\n                        $.extend(\n                          validator,\n                          validatorTemplate.init($this, el)\n                        )\n                      );\n                      foundValidator = true;\n                    }\n                  }\n                );\n              }\n            }\n\n            if (! foundValidator) {\n              $.error(\"Cannot find validation info for '\" + el + \"'\");\n            }\n          });\n\n          // =============================================================\n          //                                         STORE FALLBACK VALUES\n          // =============================================================\n\n          $helpBlock.data(\n            \"original-contents\",\n            (\n              $helpBlock.data(\"original-contents\")\n                ? $helpBlock.data(\"original-contents\")\n                : $helpBlock.html()\n            )\n          );\n\n          $helpBlock.data(\n            \"original-role\",\n            (\n              $helpBlock.data(\"original-role\")\n                ? $helpBlock.data(\"original-role\")\n                : $helpBlock.attr(\"role\")\n            )\n          );\n\n          $controlGroup.data(\n            \"original-classes\",\n            (\n              $controlGroup.data(\"original-clases\")\n                ? $controlGroup.data(\"original-classes\")\n                : $controlGroup.attr(\"class\")\n            )\n          );\n\n          $this.data(\n            \"original-aria-invalid\",\n            (\n              $this.data(\"original-aria-invalid\")\n                ? $this.data(\"original-aria-invalid\")\n                : $this.attr(\"aria-invalid\")\n            )\n          );\n\n          // =============================================================\n          //                                                    VALIDATION\n          // =============================================================\n\n          $this.bind(\n            \"validation.validation\",\n            function (event, params) {\n\n              var value = getValue($this);\n\n              // Get a list of the errors to apply\n              var errorsFound = [];\n\n              $.each(validators, function (validatorType, validatorTypeArray) {\n                if (value || value.length || (params && params.includeEmpty) || (!!settings.validatorTypes[validatorType].blockSubmit && params && !!params.submitting)) {\n                  $.each(validatorTypeArray, function (i, validator) {\n                    if (settings.validatorTypes[validatorType].validate($this, value, validator)) {\n                      errorsFound.push(validator.message);\n                    }\n                  });\n                }\n              });\n\n              return errorsFound;\n            }\n          );\n\n          $this.bind(\n            \"getValidators.validation\",\n            function () {\n              return validators;\n            }\n          );\n\n          // =============================================================\n          //                                             WATCH FOR CHANGES\n          // =============================================================\n          $this.bind(\n            \"submit.validation\",\n            function () {\n              return $this.triggerHandler(\"change.validation\", {submitting: true});\n            }\n          );\n          $this.bind(\n            [\n              \"keyup\",\n              \"focus\",\n              \"blur\",\n              \"click\",\n              \"keydown\",\n              \"keypress\",\n              \"change\"\n            ].join(\".validation \") + \".validation\",\n            function (e, params) {\n\n              var value = getValue($this);\n\n              var errorsFound = [];\n\n              $controlGroup.find(\"input,textarea,select\").each(function (i, el) {\n                var oldCount = errorsFound.length;\n                $.each($(el).triggerHandler(\"validation.validation\", params), function (j, message) {\n                  errorsFound.push(message);\n                });\n                if (errorsFound.length > oldCount) {\n                  $(el).attr(\"aria-invalid\", \"true\");\n                } else {\n                  var original = $this.data(\"original-aria-invalid\");\n                  $(el).attr(\"aria-invalid\", (original !== undefined ? original : false));\n                }\n              });\n\n              $form.find(\"input,select,textarea\").not($this).not(\"[name=\\\"\" + $this.attr(\"name\") + \"\\\"]\").trigger(\"validationLostFocus.validation\");\n\n              errorsFound = $.unique(errorsFound.sort());\n\n              // Were there any errors?\n              if (errorsFound.length) {\n                // Better flag it up as a warning.\n                $controlGroup.removeClass(\"success error\").addClass(\"warning\");\n\n                // How many errors did we find?\n                if (settings.options.semanticallyStrict && errorsFound.length === 1) {\n                  // Only one? Being strict? Just output it.\n                  $helpBlock.html(errorsFound[0] + \n                    ( settings.options.prependExistingHelpBlock ? $helpBlock.data(\"original-contents\") : \"\" ));\n                } else {\n                  // Multiple? Being sloppy? Glue them together into an UL.\n                  $helpBlock.html(\"<ul role=\\\"alert\\\"><li>\" + errorsFound.join(\"</li><li>\") + \"</li></ul>\" +\n                    ( settings.options.prependExistingHelpBlock ? $helpBlock.data(\"original-contents\") : \"\" ));\n                }\n              } else {\n                $controlGroup.removeClass(\"warning error success\");\n                if (value.length > 0) {\n                  $controlGroup.addClass(\"success\");\n                }\n                $helpBlock.html($helpBlock.data(\"original-contents\"));\n              }\n\n              if (e.type === \"blur\") {\n                $controlGroup.removeClass(\"success\");\n              }\n            }\n          );\n          $this.bind(\"validationLostFocus.validation\", function () {\n            $controlGroup.removeClass(\"success\");\n          });\n        });\n      },\n      destroy : function( ) {\n\n        return this.each(\n          function() {\n\n            var\n              $this = $(this),\n              $controlGroup = $this.parents(\".form-group\").first(),\n              $helpBlock = $controlGroup.find(\".help-block\").first();\n\n            // remove our events\n            $this.unbind('.validation'); // events are namespaced.\n            // reset help text\n            $helpBlock.html($helpBlock.data(\"original-contents\"));\n            // reset classes\n            $controlGroup.attr(\"class\", $controlGroup.data(\"original-classes\"));\n            // reset aria\n            $this.attr(\"aria-invalid\", $this.data(\"original-aria-invalid\"));\n            // reset role\n            $helpBlock.attr(\"role\", $this.data(\"original-role\"));\n\t\t\t\t\t\t// remove all elements we created\n\t\t\t\t\t\tif (createdElements.indexOf($helpBlock[0]) > -1) {\n\t\t\t\t\t\t\t$helpBlock.remove();\n\t\t\t\t\t\t}\n\n          }\n        );\n\n      },\n      collectErrors : function(includeEmpty) {\n\n        var errorMessages = {};\n        this.each(function (i, el) {\n          var $el = $(el);\n          var name = $el.attr(\"name\");\n          var errors = $el.triggerHandler(\"validation.validation\", {includeEmpty: true});\n          errorMessages[name] = $.extend(true, errors, errorMessages[name]);\n        });\n\n        $.each(errorMessages, function (i, el) {\n          if (el.length === 0) {\n            delete errorMessages[i];\n          }\n        });\n\n        return errorMessages;\n\n      },\n      hasErrors: function() {\n\n        var errorMessages = [];\n\n        this.each(function (i, el) {\n          errorMessages = errorMessages.concat(\n            $(el).triggerHandler(\"getValidators.validation\") ? $(el).triggerHandler(\"validation.validation\", {submitting: true}) : []\n          );\n        });\n\n        return (errorMessages.length > 0);\n      },\n      override : function (newDefaults) {\n        defaults = $.extend(true, defaults, newDefaults);\n      }\n    },\n\t\tvalidatorTypes: {\n      callback: {\n        name: \"callback\",\n        init: function ($this, name) {\n          return {\n            validatorName: name,\n            callback: $this.data(\"validation\" + name + \"Callback\"),\n            lastValue: $this.val(),\n            lastValid: true,\n            lastFinished: true\n          };\n        },\n        validate: function ($this, value, validator) {\n          if (validator.lastValue === value && validator.lastFinished) {\n            return !validator.lastValid;\n          }\n\n          if (validator.lastFinished === true)\n          {\n            validator.lastValue = value;\n            validator.lastValid = true;\n            validator.lastFinished = false;\n\n            var rrjqbvValidator = validator;\n            var rrjqbvThis = $this;\n            executeFunctionByName(\n              validator.callback,\n              window,\n              $this,\n              value,\n              function (data) {\n                if (rrjqbvValidator.lastValue === data.value) {\n                  rrjqbvValidator.lastValid = data.valid;\n                  if (data.message) {\n                    rrjqbvValidator.message = data.message;\n                  }\n                  rrjqbvValidator.lastFinished = true;\n                  rrjqbvThis.data(\"validation\" + rrjqbvValidator.validatorName + \"Message\", rrjqbvValidator.message);\n                  // Timeout is set to avoid problems with the events being considered 'already fired'\n                  setTimeout(function () {\n                    rrjqbvThis.trigger(\"change.validation\");\n                  }, 1); // doesn't need a long timeout, just long enough for the event bubble to burst\n                }\n              }\n            );\n          }\n\n          return false;\n\n        }\n      },\n      ajax: {\n        name: \"ajax\",\n        init: function ($this, name) {\n          return {\n            validatorName: name,\n            url: $this.data(\"validation\" + name + \"Ajax\"),\n            lastValue: $this.val(),\n            lastValid: true,\n            lastFinished: true\n          };\n        },\n        validate: function ($this, value, validator) {\n          if (\"\"+validator.lastValue === \"\"+value && validator.lastFinished === true) {\n            return validator.lastValid === false;\n          }\n\n          if (validator.lastFinished === true)\n          {\n            validator.lastValue = value;\n            validator.lastValid = true;\n            validator.lastFinished = false;\n            $.ajax({\n              url: validator.url,\n              data: \"value=\" + value + \"&field=\" + $this.attr(\"name\"),\n              dataType: \"json\",\n              success: function (data) {\n                if (\"\"+validator.lastValue === \"\"+data.value) {\n                  validator.lastValid = !!(data.valid);\n                  if (data.message) {\n                    validator.message = data.message;\n                  }\n                  validator.lastFinished = true;\n                  $this.data(\"validation\" + validator.validatorName + \"Message\", validator.message);\n                  // Timeout is set to avoid problems with the events being considered 'already fired'\n                  setTimeout(function () {\n                    $this.trigger(\"change.validation\");\n                  }, 1); // doesn't need a long timeout, just long enough for the event bubble to burst\n                }\n              },\n              failure: function () {\n                validator.lastValid = true;\n                validator.message = \"ajax call failed\";\n                validator.lastFinished = true;\n                $this.data(\"validation\" + validator.validatorName + \"Message\", validator.message);\n                // Timeout is set to avoid problems with the events being considered 'already fired'\n                setTimeout(function () {\n                  $this.trigger(\"change.validation\");\n                }, 1); // doesn't need a long timeout, just long enough for the event bubble to burst\n              }\n            });\n          }\n\n          return false;\n\n        }\n      },\n\t\t\tregex: {\n\t\t\t\tname: \"regex\",\n\t\t\t\tinit: function ($this, name) {\n\t\t\t\t\treturn {regex: regexFromString($this.data(\"validation\" + name + \"Regex\"))};\n\t\t\t\t},\n\t\t\t\tvalidate: function ($this, value, validator) {\n\t\t\t\t\treturn (!validator.regex.test(value) && ! validator.negative)\n\t\t\t\t\t\t|| (validator.regex.test(value) && validator.negative);\n\t\t\t\t}\n\t\t\t},\n\t\t\trequired: {\n\t\t\t\tname: \"required\",\n\t\t\t\tinit: function ($this, name) {\n\t\t\t\t\treturn {};\n\t\t\t\t},\n\t\t\t\tvalidate: function ($this, value, validator) {\n\t\t\t\t\treturn !!(value.length === 0  && ! validator.negative)\n\t\t\t\t\t\t|| !!(value.length > 0 && validator.negative);\n\t\t\t\t},\n        blockSubmit: true\n\t\t\t},\n\t\t\tmatch: {\n\t\t\t\tname: \"match\",\n\t\t\t\tinit: function ($this, name) {\n\t\t\t\t\tvar element = $this.parents(\"form\").first().find(\"[name=\\\"\" + $this.data(\"validation\" + name + \"Match\") + \"\\\"]\").first();\n\t\t\t\t\telement.bind(\"validation.validation\", function () {\n\t\t\t\t\t\t$this.trigger(\"change.validation\", {submitting: true});\n\t\t\t\t\t});\n\t\t\t\t\treturn {\"element\": element};\n\t\t\t\t},\n\t\t\t\tvalidate: function ($this, value, validator) {\n\t\t\t\t\treturn (value !== validator.element.val() && ! validator.negative)\n\t\t\t\t\t\t|| (value === validator.element.val() && validator.negative);\n\t\t\t\t},\n        blockSubmit: true\n\t\t\t},\n\t\t\tmax: {\n\t\t\t\tname: \"max\",\n\t\t\t\tinit: function ($this, name) {\n\t\t\t\t\treturn {max: $this.data(\"validation\" + name + \"Max\")};\n\t\t\t\t},\n\t\t\t\tvalidate: function ($this, value, validator) {\n\t\t\t\t\treturn (parseFloat(value, 10) > parseFloat(validator.max, 10) && ! validator.negative)\n\t\t\t\t\t\t|| (parseFloat(value, 10) <= parseFloat(validator.max, 10) && validator.negative);\n\t\t\t\t}\n\t\t\t},\n\t\t\tmin: {\n\t\t\t\tname: \"min\",\n\t\t\t\tinit: function ($this, name) {\n\t\t\t\t\treturn {min: $this.data(\"validation\" + name + \"Min\")};\n\t\t\t\t},\n\t\t\t\tvalidate: function ($this, value, validator) {\n\t\t\t\t\treturn (parseFloat(value) < parseFloat(validator.min) && ! validator.negative)\n\t\t\t\t\t\t|| (parseFloat(value) >= parseFloat(validator.min) && validator.negative);\n\t\t\t\t}\n\t\t\t},\n\t\t\tmaxlength: {\n\t\t\t\tname: \"maxlength\",\n\t\t\t\tinit: function ($this, name) {\n\t\t\t\t\treturn {maxlength: $this.data(\"validation\" + name + \"Maxlength\")};\n\t\t\t\t},\n\t\t\t\tvalidate: function ($this, value, validator) {\n\t\t\t\t\treturn ((value.length > validator.maxlength) && ! validator.negative)\n\t\t\t\t\t\t|| ((value.length <= validator.maxlength) && validator.negative);\n\t\t\t\t}\n\t\t\t},\n\t\t\tminlength: {\n\t\t\t\tname: \"minlength\",\n\t\t\t\tinit: function ($this, name) {\n\t\t\t\t\treturn {minlength: $this.data(\"validation\" + name + \"Minlength\")};\n\t\t\t\t},\n\t\t\t\tvalidate: function ($this, value, validator) {\n\t\t\t\t\treturn ((value.length < validator.minlength) && ! validator.negative)\n\t\t\t\t\t\t|| ((value.length >= validator.minlength) && validator.negative);\n\t\t\t\t}\n\t\t\t},\n\t\t\tmaxchecked: {\n\t\t\t\tname: \"maxchecked\",\n\t\t\t\tinit: function ($this, name) {\n\t\t\t\t\tvar elements = $this.parents(\"form\").first().find(\"[name=\\\"\" + $this.attr(\"name\") + \"\\\"]\");\n\t\t\t\t\telements.bind(\"click.validation\", function () {\n\t\t\t\t\t\t$this.trigger(\"change.validation\", {includeEmpty: true});\n\t\t\t\t\t});\n\t\t\t\t\treturn {maxchecked: $this.data(\"validation\" + name + \"Maxchecked\"), elements: elements};\n\t\t\t\t},\n\t\t\t\tvalidate: function ($this, value, validator) {\n\t\t\t\t\treturn (validator.elements.filter(\":checked\").length > validator.maxchecked && ! validator.negative)\n\t\t\t\t\t\t|| (validator.elements.filter(\":checked\").length <= validator.maxchecked && validator.negative);\n\t\t\t\t},\n        blockSubmit: true\n\t\t\t},\n\t\t\tminchecked: {\n\t\t\t\tname: \"minchecked\",\n\t\t\t\tinit: function ($this, name) {\n\t\t\t\t\tvar elements = $this.parents(\"form\").first().find(\"[name=\\\"\" + $this.attr(\"name\") + \"\\\"]\");\n\t\t\t\t\telements.bind(\"click.validation\", function () {\n\t\t\t\t\t\t$this.trigger(\"change.validation\", {includeEmpty: true});\n\t\t\t\t\t});\n\t\t\t\t\treturn {minchecked: $this.data(\"validation\" + name + \"Minchecked\"), elements: elements};\n\t\t\t\t},\n\t\t\t\tvalidate: function ($this, value, validator) {\n\t\t\t\t\treturn (validator.elements.filter(\":checked\").length < validator.minchecked && ! validator.negative)\n\t\t\t\t\t\t|| (validator.elements.filter(\":checked\").length >= validator.minchecked && validator.negative);\n\t\t\t\t},\n        blockSubmit: true\n\t\t\t}\n\t\t},\n\t\tbuiltInValidators: {\n\t\t\temail: {\n\t\t\t\tname: \"Email\",\n\t\t\t\ttype: \"shortcut\",\n\t\t\t\tshortcut: \"validemail\"\n\t\t\t},\n\t\t\tvalidemail: {\n\t\t\t\tname: \"Validemail\",\n\t\t\t\ttype: \"regex\",\n\t\t\t\tregex: \"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\\\\\.[A-Za-z]{2,4}\",\n\t\t\t\tmessage: \"Not a valid email address<!-- data-validator-validemail-message to override -->\"\n\t\t\t},\n\t\t\tpasswordagain: {\n\t\t\t\tname: \"Passwordagain\",\n\t\t\t\ttype: \"match\",\n\t\t\t\tmatch: \"password\",\n\t\t\t\tmessage: \"Does not match the given password<!-- data-validator-paswordagain-message to override -->\"\n\t\t\t},\n\t\t\tpositive: {\n\t\t\t\tname: \"Positive\",\n\t\t\t\ttype: \"shortcut\",\n\t\t\t\tshortcut: \"number,positivenumber\"\n\t\t\t},\n\t\t\tnegative: {\n\t\t\t\tname: \"Negative\",\n\t\t\t\ttype: \"shortcut\",\n\t\t\t\tshortcut: \"number,negativenumber\"\n\t\t\t},\n\t\t\tnumber: {\n\t\t\t\tname: \"Number\",\n\t\t\t\ttype: \"regex\",\n\t\t\t\tregex: \"([+-]?\\\\\\d+(\\\\\\.\\\\\\d*)?([eE][+-]?[0-9]+)?)?\",\n\t\t\t\tmessage: \"Must be a number<!-- data-validator-number-message to override -->\"\n\t\t\t},\n\t\t\tinteger: {\n\t\t\t\tname: \"Integer\",\n\t\t\t\ttype: \"regex\",\n\t\t\t\tregex: \"[+-]?\\\\\\d+\",\n\t\t\t\tmessage: \"No decimal places allowed<!-- data-validator-integer-message to override -->\"\n\t\t\t},\n\t\t\tpositivenumber: {\n\t\t\t\tname: \"Positivenumber\",\n\t\t\t\ttype: \"min\",\n\t\t\t\tmin: 0,\n\t\t\t\tmessage: \"Must be a positive number<!-- data-validator-positivenumber-message to override -->\"\n\t\t\t},\n\t\t\tnegativenumber: {\n\t\t\t\tname: \"Negativenumber\",\n\t\t\t\ttype: \"max\",\n\t\t\t\tmax: 0,\n\t\t\t\tmessage: \"Must be a negative number<!-- data-validator-negativenumber-message to override -->\"\n\t\t\t},\n\t\t\trequired: {\n\t\t\t\tname: \"Required\",\n\t\t\t\ttype: \"required\",\n\t\t\t\tmessage: \"This is required<!-- data-validator-required-message to override -->\"\n\t\t\t},\n\t\t\tcheckone: {\n\t\t\t\tname: \"Checkone\",\n\t\t\t\ttype: \"minchecked\",\n\t\t\t\tminchecked: 1,\n\t\t\t\tmessage: \"Check at least one option<!-- data-validation-checkone-message to override -->\"\n\t\t\t}\n\t\t}\n\t};\n\n\tvar formatValidatorName = function (name) {\n\t\treturn name\n\t\t\t.toLowerCase()\n\t\t\t.replace(\n\t\t\t\t/(^|\\s)([a-z])/g ,\n\t\t\t\tfunction(m,p1,p2) {\n\t\t\t\t\treturn p1+p2.toUpperCase();\n\t\t\t\t}\n\t\t\t)\n\t\t;\n\t};\n\n\tvar getValue = function ($this) {\n\t\t// Extract the value we're talking about\n\t\tvar value = $this.val();\n\t\tvar type = $this.attr(\"type\");\n\t\tif (type === \"checkbox\") {\n\t\t\tvalue = ($this.is(\":checked\") ? value : \"\");\n\t\t}\n\t\tif (type === \"radio\") {\n\t\t\tvalue = ($('input[name=\"' + $this.attr(\"name\") + '\"]:checked').length > 0 ? value : \"\");\n\t\t}\n\t\treturn value;\n\t};\n\n  function regexFromString(inputstring) {\n\t\treturn new RegExp(\"^\" + inputstring + \"$\");\n\t}\n\n  /**\n   * Thanks to Jason Bunting via StackOverflow.com\n   *\n   * http://stackoverflow.com/questions/359788/how-to-execute-a-javascript-function-when-i-have-its-name-as-a-string#answer-359910\n   * Short link: http://tinyurl.com/executeFunctionByName\n  **/\n  function executeFunctionByName(functionName, context /*, args*/) {\n    var args = Array.prototype.slice.call(arguments).splice(2);\n    var namespaces = functionName.split(\".\");\n    var func = namespaces.pop();\n    for(var i = 0; i < namespaces.length; i++) {\n      context = context[namespaces[i]];\n    }\n    return context[func].apply(this, args);\n  }\n\n\t$.fn.jqBootstrapValidation = function( method ) {\n\n\t\tif ( defaults.methods[method] ) {\n\t\t\treturn defaults.methods[method].apply( this, Array.prototype.slice.call( arguments, 1 ));\n\t\t} else if ( typeof method === 'object' || ! method ) {\n\t\t\treturn defaults.methods.init.apply( this, arguments );\n\t\t} else {\n\t\t$.error( 'Method ' +  method + ' does not exist on jQuery.jqBootstrapValidation' );\n\t\t\treturn null;\n\t\t}\n\n\t};\n\n  $.jqBootstrapValidation = function (options) {\n    $(\":input\").not(\"[type=image],[type=submit]\").jqBootstrapValidation.apply(this,arguments);\n  };\n\n})( jQuery );\n"]}